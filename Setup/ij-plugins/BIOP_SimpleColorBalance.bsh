import ij.*;
import ij.process.*;
import ij.measure.Measurements;
import ij.gui.Roi;
// White Balance based on ROI

// Get Current Image
ImagePlus imp = IJ.getImage();

// Make sure it is RGB
if (imp.getType() != ImagePlus.COLOR_RGB) {
	return;
}
//get ROI or make one if not available
Roi theRoi = imp.getRoi();
if (theRoi == null) {
	IJ.log("No ROI, making a square at (0,0) of width 65 px"); 
	theRoi = new Roi(0, 0, 65,65, imp);
}
//Remove ROI before duplication
imp.killRoi();


ImagePlus imp2 = imp.duplicate();
imp2.setTitle("Color Balanced "+imp.getTitle());

// Make a 3 slice stack
ImageConverter ic = new ImageConverter(imp2);
ic.convertToRGBStack();
imp2.setRoi(theRoi);
statOptions = Measurements.MEAN+Measurements.MEDIAN;

// Calculate mean/median of each color
imp2.setPosition(1); //R
ImageStatistics isR = imp2.getStatistics(statOptions);
imp2.setPosition(2); //G
ImageStatistics isG = imp2.getStatistics(statOptions);
imp2.setPosition(3); //B
ImageStatistics isB = imp2.getStatistics(statOptions);

//IJ.log("R:"+isR.mean+", G:"+isG.mean+", B:"+isB.mean);

double[] rgb = {isR.mean,isG.mean,isB.mean};

// find largest value.
double maxVal = 0;
int idx = -1;
double scale;
for(i=0; i<3;i++) {
	if (rgb[i] > maxVal) {
		idx = i;
		maxVal = rgb[i];
		scale = 255/maxVal;
	}
}

// Remove ROI again to make sure we apply the multiplication to the whole image
imp2.killRoi();

for (i=0; i<3; i++) {
	imp2.setPosition(i+1);
	ip = imp2.getProcessor();
	val = maxVal/rgb[i]*scale;
	IJ.log(""+val+", "+rgb[i]+", "+maxVal);
	ip.multiply(maxVal/rgb[i]*scale); //Scaling the other channels to the largest one.
}

// Convert it back
ImageConverter ic = new ImageConverter(imp2);
ic.convertRGBStackToRGB();

//Show the image
imp2.show();